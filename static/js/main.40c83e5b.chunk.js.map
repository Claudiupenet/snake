{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initialFood","xx","Math","floor","random","yy","x","y","initialState","snakeBody","isRunning","level","streak","foodBody","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","move","initialSnakeBody","JSON","parse","stringify","state","head","length","advance","dontLeave","getCellType","generateFood","processLevel","splice","directionChanged","setState","concat","toConsumableArray","endGame","clearInterval","timer","setInterval","direction","changeDirection","e","button","arguments","undefined","repeat","initialDirection","key","some","cell","startGame","prev","restart","objectSpread","document","getElementById","style","display","snakeField","Array","fill","addEventListener","_this2","react_default","a","createElement","Fragment","id","onClick","className","map","linie","indexX","coloana","indexY","window","orientation","navigator","userAgent","indexOf","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAIMA,SAAc,WAGlB,IAFA,IAAIC,EAAKC,KAAKC,MAAsB,GAAhBD,KAAKE,UACrBC,EAAKH,KAAKC,MAAsB,GAAhBD,KAAKE,UACZ,IAAPH,GAAmB,IAAPI,GAAmB,IAAPA,GAAmB,IAAPA,GACxCJ,EAAKC,KAAKC,MAAsB,GAAhBD,KAAKE,UACrBC,EAAKH,KAAKC,MAAsB,GAAhBD,KAAKE,UAEvB,MAAO,CAAEE,EAAGL,EAAIM,EAAGF,KAGfG,EAAe,CACnBC,UAAW,CAAC,CAAEH,EAAG,EAAGC,EAAG,GAAK,CAAED,EAAG,EAAGC,EAAG,GAAK,CAAED,EAAG,EAAGC,EAAG,IACvDG,WAAW,EACXC,MAAO,EACPC,OAAQ,EACRC,SAAUb,KA+KGc,cA5Kb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAWFI,KAAO,WACL,IAAIC,EAAmBC,KAAKC,MAAMD,KAAKE,UAAUX,EAAKY,MAAMlB,YACtDmB,EAAOJ,KAAKC,MAAMD,KAAKE,UAAUH,EAAiBA,EAAiBM,OAAS,KAClFd,EAAKe,QAAQF,GACbb,EAAKgB,UAAUH,GAE0B,aAArCb,EAAKiB,YAAYJ,EAAKtB,EAAGsB,EAAKrB,IAChCQ,EAAKkB,eACLlB,EAAKmB,gBAELX,EAAiBY,OAAO,EAAG,GAG8B,cAAvDpB,EAAKiB,YAAYJ,EAAKtB,EAAGsB,EAAKrB,EAAGgB,IAIrCR,EAAKqB,kBAAmB,EACxBrB,EAAKsB,SAAS,CAAC5B,UAAS,GAAA6B,OAAAtB,OAAAuB,EAAA,EAAAvB,CAAMO,GAAN,CAAwBK,OAJ9Cb,EAAKyB,WA1BKzB,EAiCdmB,aAAe,WACb,IAAIvB,EAAQI,EAAKY,MAAMhB,MACnBC,EAASG,EAAKY,MAAMf,OACpBA,EAAS,GAAKD,EAAQ,GAAIC,IACrBD,EAAQ,KACfC,EAAS,EACTD,IACA8B,cAAc1B,EAAK2B,OACnB3B,EAAK2B,MAAQC,YAAY5B,EAAKO,KAAqB,IAAd,GAAKX,KAE5CI,EAAKsB,SAAS,CAAC1B,QAAOC,YA3CVG,EA8Cde,QAAU,SAAAF,GACJb,EAAKY,MAAMjB,YACM,IAAnBK,EAAK6B,UACDhB,EAAKrB,IACc,IAAnBQ,EAAK6B,UACLhB,EAAKtB,IACc,IAAnBS,EAAK6B,UACLhB,EAAKrB,IACLqB,EAAKtB,MAtDCS,EA0DdgB,UAAY,SAAAH,GACNA,EAAKrB,EAAI,GAAIqB,EAAKrB,EAAI,EACjBqB,EAAKrB,EAAI,EAAGqB,EAAKrB,EAAI,GACrBqB,EAAKtB,EAAI,GAAIsB,EAAKtB,EAAI,EACtBsB,EAAKtB,EAAI,IAAGsB,EAAKtB,EAAI,KA9DlBS,EAiEd8B,gBAAkB,SAACC,GAAqB,IAAlBC,EAAkBC,UAAAnB,OAAA,QAAAoB,IAAAD,UAAA,GAAAA,UAAA,GAAT,KAC7B,IAAIF,EAAEI,SAAUnC,EAAKqB,iBAArB,CACA,IAAIe,EAAmBpC,EAAK6B,UACb,MAAVE,EAAEM,KAAyB,YAAVN,EAAEM,KAAgC,OAAXL,GAAuC,IAAnBhC,EAAK6B,UAChD,MAAVE,EAAEM,KAAyB,eAAVN,EAAEM,KAAmC,UAAXL,GAA0C,IAAnBhC,EAAK6B,UAC7D,MAAVE,EAAEM,KAAyB,cAAVN,EAAEM,KAAkC,SAAXL,GAAyC,IAAnBhC,EAAK6B,UAC3D,MAAVE,EAAEM,KAAyB,cAAVN,EAAEM,KAAkC,SAAXL,GAAyC,IAAnBhC,EAAK6B,YAAiB7B,EAAK6B,UAAY,GADjB7B,EAAK6B,UAAY,EADf7B,EAAK6B,UAAY,EAD9B7B,EAAK6B,UAAY,EAIrG7B,EAAK6B,YAAcO,IAAkBpC,EAAKqB,kBAAmB,KAxEpDrB,EA2EdkB,aAAe,WAGb,IAFA,IAAIhC,EAAKC,KAAKC,MAAsB,GAAhBD,KAAKE,UACrBC,EAAKH,KAAKC,MAAsB,GAAhBD,KAAKE,UACW,cAA7BW,EAAKiB,YAAY/B,EAAII,IAC1BJ,EAAKC,KAAKC,MAAsB,GAAhBD,KAAKE,UACrBC,EAAKH,KAAKC,MAAsB,GAAhBD,KAAKE,UAEvBW,EAAKsB,SAAS,CAACxB,SAAU,CAAEP,EAAGL,EAAIM,EAAGF,MAlFzBU,EAqFdiB,YAAc,SAAC1B,EAAGC,GAKhB,OALwDyC,UAAAnB,OAAA,QAAAoB,IAAAD,UAAA,GAAAA,UAAA,GAAzBjC,EAAKY,MAAMlB,WACb4C,KAAK,SAAAC,GAC/B,OAAOA,EAAKhD,IAAMA,GAAKgD,EAAK/C,IAAMA,IAI5B,YACCQ,EAAKY,MAAMd,SAASP,IAAMA,GAAKS,EAAKY,MAAMd,SAASN,IAAMA,EAC1D,WAGE,QAhGCQ,EAoGdwC,UAAY,WACNxC,EAAKY,MAAMjB,UAAW+B,cAAc1B,EAAK2B,OACxC3B,EAAK2B,MAAQC,YAAY5B,EAAKO,KAAgC,IAAzB,GAAKP,EAAKY,MAAMhB,QAC1DI,EAAKsB,SAAS,SAAAmB,GACZ,MAAO,CAAE9C,WAAY8C,EAAK9C,cAxGhBK,EA4Gd0C,QAAU,WACR1C,EAAKsB,SAALrB,OAAA0C,EAAA,EAAA1C,CAAA,GACKR,EADL,CAEEE,WAAW,EACXG,SAAUb,OAEZe,EAAK6B,UAAY,EACjB7B,EAAKqB,kBAAmB,EACxBK,cAAc1B,EAAK2B,OACnB3B,EAAK2B,MAAQC,YAAY5B,EAAKO,KAAkC,IAA3B,GAAKd,EAAaG,QACvDgD,SAASC,eAAe,eAAeC,MAAMC,QAAU,QAtH3C/C,EAyHdyB,QAAU,WACRzB,EAAKsB,SAAS,CAAE3B,WAAW,IAC3BiD,SAASC,eAAe,eAAeC,MAAMC,QAAU,QACvDrB,cAAc1B,EAAK2B,QA5HP3B,EA+HdgD,WAAaC,MAAM,IAAIC,KAAKD,MAAM,IAAIC,KAAK,OA7HzClD,EAAKY,MAALX,OAAA0C,EAAA,EAAA1C,CAAA,GAAiBR,GACjBO,EAAK6B,UAAY,EACjB7B,EAAKqB,kBAAmB,EACxBrB,EAAK2B,MAAQ,KALD3B,mFASZ4C,SAASO,iBAAiB,UAAWhD,KAAK2B,kDAwHnC,IAAAsB,EAAAjD,KAEP,OACEkD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,QACNJ,EAAAC,EAAAC,cAAA,sBACUpD,KAAKS,MAAMhB,MAAQ,GAAKO,KAAKS,MAAMhB,MAAQ,YAC7C,IACRyD,EAAAC,EAAAC,cAAA,+BAAuBpD,KAAKS,MAAMf,QAClCwD,EAAAC,EAAAC,cAAA,UAAQE,GAAG,cAAcC,QAAS,kBAAMN,EAAKZ,cAC1CrC,KAAKS,MAAMjB,UAAY,QAAU,UAGtC0D,EAAAC,EAAAC,cAAA,OAAKE,GAAG,eAAR,yCAEEJ,EAAAC,EAAAC,cAAA,UAAQG,QAAS,kBAAMN,EAAKV,YAA5B,YAEFW,EAAAC,EAAAC,cAAA,OAAKI,UAAU,SACZxD,KAAK6C,WAAWY,IAAI,SAACC,EAAOC,GAC3B,OACET,EAAAC,EAAAC,cAAA,OAAKI,UAAU,SACdE,EAAMD,IAAI,SAACG,EAASC,GACnB,OACEX,EAAAC,EAAAC,cAAA,OAAKI,UAAWP,EAAKnC,YAAY6C,EAAQE,YASlB,qBAAvBC,OAAOC,cAA8E,IAA7CC,UAAUC,UAAUC,QAAQ,cAAwBhB,EAAAC,EAAAC,cAAA,OAAKE,GAAG,YAC1GJ,EAAAC,EAAAC,cAAA,UAAQI,UAAU,qBAAqBD,QAAU,SAAC3B,GAAD,OAAMqB,EAAKtB,gBAAgBC,EAAG,QAA/E,WACAsB,EAAAC,EAAAC,cAAA,UAAQG,QAAU,SAAC3B,GAAD,OAAMqB,EAAKtB,gBAAgBC,EAAG,UAAhD,UACAsB,EAAAC,EAAAC,cAAA,UAAQE,GAAG,UAAUC,QAAU,SAAC3B,GAAD,OAAMqB,EAAKtB,gBAAgBC,EAAG,WAA7D,UACAsB,EAAAC,EAAAC,cAAA,UAAQI,UAAU,qBAAqBD,QAAU,SAAC3B,GAAD,OAAMqB,EAAKtB,gBAAgBC,EAAG,UAA/E,mBAtKMuC,IAAMC,WCTJC,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASlC,SAASC,eAAe,SD2H3C,kBAAmBsB,WACrBA,UAAUY,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.40c83e5b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\n\nconst initialFood = () => {\n  var xx = Math.floor(Math.random() * 29);\n  var yy = Math.floor(Math.random() * 29);\n  while(xx === 2 || yy === 2 || yy === 3 || yy === 4) {\n    xx = Math.floor(Math.random() * 29);\n    yy = Math.floor(Math.random() * 29);  \n  }\n  return { x: xx, y: yy }\n}\n\nconst initialState = {\n  snakeBody: [{ x: 2, y: 2 }, { x: 2, y: 3 }, { x: 2, y: 4 }],\n  isRunning: false,\n  level: 1,\n  streak: 0,\n  foodBody: initialFood()\n};\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {...initialState};\n    this.direction = 1;\n    this.directionChanged = false;\n    this.timer = null;\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.changeDirection);\n  }\n\n  move = () => {\n    var initialSnakeBody = JSON.parse(JSON.stringify(this.state.snakeBody));\n    const head = JSON.parse(JSON.stringify(initialSnakeBody[initialSnakeBody.length - 1]));\n    this.advance(head);\n    this.dontLeave(head);\n    \n    if (this.getCellType(head.x, head.y) === \"foodBody\") {\n      this.generateFood();\n      this.processLevel();\n    } else {\n      initialSnakeBody.splice(0, 1);\n    }\n    \n    if (this.getCellType(head.x, head.y, initialSnakeBody) === \"snakeBody\") {\n      this.endGame();\n      return;\n    }\n    this.directionChanged = false;\n    this.setState({snakeBody: [...initialSnakeBody, head]})\n  };\n\n  processLevel = () => {\n    let level = this.state.level;\n    let streak = this.state.streak;\n    if (streak < 4 && level < 10) streak++;\n    else if (level < 10) {\n      streak = 0;\n      level++;\n      clearInterval(this.timer);\n      this.timer = setInterval(this.move, (11 - level) * 30);\n    }\n    this.setState({level, streak})\n  };\n\n  advance = head => {\n    if (this.state.isRunning) {\n      this.direction === 1\n        ? head.y++\n        : this.direction === 2\n        ? head.x++\n        : this.direction === 3\n        ? head.y--\n        : head.x--;\n    }\n  };\n\n  dontLeave = head => {\n    if (head.y > 29) head.y = 0;\n    else if (head.y < 0) head.y = 29;\n    else if (head.x > 29) head.x = 0;\n    else if (head.x < 0) head.x = 29;\n  };\n\n  changeDirection = (e, button = null) => {\n    if (e.repeat || this.directionChanged) return;\n    var initialDirection = this.direction;\n    if ((e.key === \"w\" || e.key === \"ArrowUp\" || button === \"up\") && this.direction !== 2) this.direction = 0;\n      else if ((e.key === \"d\" || e.key === \"ArrowRight\" || button === \"right\") && this.direction !== 3) this.direction = 1;\n      else if ((e.key === \"s\" || e.key === \"ArrowDown\" || button === \"down\") && this.direction !== 0) this.direction = 2;\n      else if ((e.key === \"a\" || e.key === \"ArrowLeft\" || button === \"left\") && this.direction !== 1) this.direction = 3;\n    if(this.direction !== initialDirection) this.directionChanged = true;\n  };\n\n  generateFood = () => {\n    var xx = Math.floor(Math.random() * 30);\n    var yy = Math.floor(Math.random() * 30);\n    while (this.getCellType(xx, yy) === \"snakeBody\") {\n      xx = Math.floor(Math.random() * 30);\n      yy = Math.floor(Math.random() * 30);  \n    }\n    this.setState({foodBody: { x: xx, y: yy }})\n  };\n\n  getCellType = (x, y, snakeBody = this.state.snakeBody) => {\n     var isSnakeCell = snakeBody.some(cell => {\n       return cell.x === x && cell.y === y\n     }\n    ) \n    if(isSnakeCell){\n      return \"snakeBody\"\n    } else if(this.state.foodBody.x === x && this.state.foodBody.y === y){\n      return \"foodBody\"\n    }\n      else {\n        return \"cell\"\n      }\n  }\n\n  startGame = () => {\n    if (this.state.isRunning) clearInterval(this.timer);\n    else this.timer = setInterval(this.move, (11 - this.state.level) * 30);\n    this.setState(prev => {\n      return { isRunning: !prev.isRunning };\n    });\n  };\n\n  restart = () => {\n    this.setState({\n      ...initialState,\n      isRunning: true,\n      foodBody: initialFood()\n    });\n    this.direction = 1;\n    this.directionChanged = false;\n    clearInterval(this.timer);\n    this.timer = setInterval(this.move, (11 - initialState.level) * 30);\n    document.getElementById(\"lostMessage\").style.display = \"none\";\n  };\n\n  endGame = () => {\n    this.setState({ isRunning: false });\n    document.getElementById(\"lostMessage\").style.display = \"block\";\n    clearInterval(this.timer)\n  };\n\n  snakeField = Array(30).fill(Array(30).fill(null));\n\n  render() {\n\n    return (\n      <>\n        <div id=\"info\">\n          <span>\n            Level: {this.state.level < 10 ? this.state.level : \"Max (10)\"}\n          </span>{\" \"}\n          <span>Current streak: {this.state.streak}</span>\n          <button id=\"startButton\" onClick={() => this.startGame()}>\n            {this.state.isRunning ? \"Pause\" : \"Start\"}\n          </button>\n        </div>\n        <div id=\"lostMessage\">\n          You lost. Click restart to play again!\n          <button onClick={() => this.restart()}>Restart</button>\n        </div>\n        <div className=\"field\">\n          {this.snakeField.map((linie, indexX) => {\n            return(\n              <div className=\"linie\">\n              {linie.map((coloana, indexY) => {\n                return(\n                  <div className={this.getCellType(indexX, indexY)}>\n                    \n                  </div>\n                );\n              })}\n              </div>\n            );\n          })}\n        </div>\n        {((typeof window.orientation !== \"undefined\") || (navigator.userAgent.indexOf('IEMobile') !== -1)) && <div id=\"controls\">\n            <button className=\"displayBlockButton\" onClick={ (e)=> this.changeDirection(e, 'up')}>\t&uarr;</button>\n            <button onClick={ (e)=> this.changeDirection(e, 'left')} >&larr;</button>\n            <button id=\"rButton\" onClick={ (e)=> this.changeDirection(e, 'right')} >&rarr;</button>\n            <button className=\"displayBlockButton\" onClick={ (e)=> this.changeDirection(e, 'down')} >&darr;</button>\n          </div>}\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}